generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Court {
    id               Int               @id @default(autoincrement())
    name             String
    type             String
    tagColor         String?
    image            String?
    isActive         Boolean           @default(true)
    slots            Slot[]
    bookingSchedules BookingSchedule[]
}

model Slot {
    id               Int               @id @default(autoincrement())
    startTime        DateTime
    endTime          DateTime
    court            Court             @relation(fields: [courtId], references: [id])
    courtId          Int
    bookings         Booking[]
    bookingSchedules BookingSchedule[]
}

model Booking {
    id        Int      @id @default(autoincrement())
    date      DateTime
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    slotId    Int
    slot      Slot     @relation(fields: [slotId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id               Int               @id @default(autoincrement())
    username         String            @unique
    email            String            @unique
    password         String
    name             String
    phone            String?
    role             String            @default("user")
    bookings         Booking[]
    bookingSchedules BookingSchedule[]
}

model BookingSchedule {
    id       Int      @id @default(autoincrement())
    date     DateTime
    courtId  Int
    court    Court    @relation(fields: [courtId], references: [id])
    slotId   Int
    slot     Slot     @relation(fields: [slotId], references: [id])
    isBooked Boolean  @default(false)
    bookedBy Int?
    user     User?    @relation(fields: [bookedBy], references: [id])
}
